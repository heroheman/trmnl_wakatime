<!-- WakaTime Half Horizontal Layout -->
<div class="view view--half-horizontal">
  <div class="layout layout--col gap--space-between">
    
    {% render 'dashboard_horizontal' 
        selected_metrics: trmnl.plugin_settings.custom_fields_values.dashboard_metrics,
        exclude_future_week: trmnl.plugin_settings.custom_fields_values.exclude_future_week | default: 'false',
        valueFit: false,
        data: data
    %}
    <!-- Chart Container -->
    {% assign selected_layout = trmnl.plugin_settings.custom_fields_values.layout | default: 'lines' | downcase %}
    {% if selected_layout == 'contributions' %}
      <!-- GitHub-style Contributions Grid -->
      <div class="contributions-container">
        <div class="contributions-grid flex flex--col gap--1" id="contributions-grid-half">
          <!-- Grid will be populated by JavaScript -->
        </div>
        <div class="flex flex--row flex--center-x mt--2">
          <span class="description text--small">Less</span>
          <div class="flex flex--row gap--1 mx--2">
            <div class="w--2 h--2 bg--gray-7"></div>
            <div class="w--2 h--2 bg--gray-5"></div>
            <div class="w--2 h--2 bg--gray-4"></div>
            <div class="w--2 h--2 bg--gray-3"></div>
            <div class="w--2 h--2 bg--gray-2"></div>
            <div class="w--2 h--2 bg--gray-1"></div>
            <div class="w--2 h--2 bg--black"></div>
          </div>
          <span class="description text--small">More</span>
        </div>
      </div>
    {% else %}
      <div id="wakatime-chart-half" style="width: 100%"></div>
    {% endif %}
  </div>

  {% render 'wakatime_title_bar' %}
</div>

<script type="text/javascript">
  // Prepare chart data from Wakatime API response
  var chartData = [];
  var contributionsData = {};
  
  // Get selected timeframe from settings
  var selectedTimeframe = "{{ trmnl.plugin_settings.custom_fields_values.timeframe | default: 'last_30_days' }}";
  var dataLimit = 365; // Default for contributions and last_year
  
  if (selectedTimeframe === 'last_7_days') {
    dataLimit = 7;
  } else if (selectedTimeframe === 'last_30_days') {
    dataLimit = 30;
  } else if (selectedTimeframe === 'last_90_days') {
    dataLimit = 90;
  }
  
  {% for day in data limit: 365 reversed %}
    {% if day.range.start and day.grand_total.total_seconds %}
      {% assign day_start_date = day.range.start | split: 'T' | first %}
      var hours = {{ day.grand_total.total_seconds | divided_by: 3600.0 | round: 2 }};
      chartData.push(["{{ day_start_date }}", hours]);
      contributionsData["{{ day_start_date }}"] = hours;
    {% endif %}
  {% endfor %}

  // Get selected layout from settings
  var selectedLayout = "{{ trmnl.plugin_settings.custom_fields_values.layout | default: 'lines' | downcase }}";
  
  // Get grouping setting
  var enableGrouping = "{{ trmnl.plugin_settings.custom_fields_values.enable_grouping | default: 'true' }}" === 'true';
  
  // Get exclude weekends setting
  var excludeWeekends = "{{ trmnl.plugin_settings.custom_fields_values.exclude_weekends | default: 'false' }}" === 'true';
  
  // Get exclude future week setting
  var excludeFutureWeek = "{{ trmnl.plugin_settings.custom_fields_values.exclude_future_week | default: 'false' }}" === 'true';
  
  // Filter out future days if enabled
  if (excludeFutureWeek) {
    var today = new Date();
    today.setHours(23, 59, 59, 999); // Set to end of today
    chartData = chartData.filter(function(item) {
      var itemDate = new Date(item[0]);
      return itemDate <= today;
    });
  }
  
  // Filter out weekends if enabled
  if (excludeWeekends) {
    chartData = chartData.filter(function(item) {
      var date = new Date(item[0]);
      var dayOfWeek = date.getDay(); // 0 = Sunday, 6 = Saturday
      return dayOfWeek !== 0 && dayOfWeek !== 6;
    });
  }
  
  // Filter chart data based on timeframe (but not contributions)
  var filteredChartData = chartData;
  if (selectedLayout !== "contributions" && selectedLayout !== "contributions") {
    filteredChartData = chartData.slice(-dataLimit);
  }

  // Function to group data for line charts
  function groupDataForLineChart(data, timeframe) {
    // Only group if grouping is enabled
    if (!enableGrouping) {
      return data;
    }
    
    if (timeframe === 'last_90_days') {
      // Group by 7-day periods and calculate median
      var groupedData = [];
      for (var i = 0; i < data.length; i += 7) {
        var weekData = data.slice(i, i + 7);
        if (weekData.length > 0) {
          var values = weekData.map(function(item) { return item[1]; }).sort(function(a, b) { return a - b; });
          var median = values.length % 2 === 0 
            ? (values[Math.floor(values.length / 2) - 1] + values[Math.floor(values.length / 2)]) / 2
            : values[Math.floor(values.length / 2)];
          // Use the last date of the week
          groupedData.push([weekData[weekData.length - 1][0], median]);
        }
      }
      return groupedData;
    } else if (timeframe === 'last_year') {
      // Group by month and calculate median
      var monthlyGroups = {};
      data.forEach(function(item) {
        var date = new Date(item[0]);
        var monthKey = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0');
        if (!monthlyGroups[monthKey]) {
          monthlyGroups[monthKey] = [];
        }
        monthlyGroups[monthKey].push(item[1]);
      });
      
      var groupedData = [];
      Object.keys(monthlyGroups).sort().forEach(function(monthKey) {
        var values = monthlyGroups[monthKey].sort(function(a, b) { return a - b; });
        var median = values.length % 2 === 0 
          ? (values[Math.floor(values.length / 2) - 1] + values[Math.floor(values.length / 2)]) / 2
          : values[Math.floor(values.length / 2)];
        // Use first day of month for consistent display
        groupedData.push([monthKey + '-01', median]);
      });
      return groupedData;
    }
    return data;
  }

  // Function to get contribution level based on hours
  function getContributionLevel(hours) {
    if (hours === 0) return 'bg--white';
    if (hours < 0.5) return 'bg--gray-7';
    if (hours < 1) return 'bg--gray-5';
    if (hours < 2) return 'bg--gray-3';
    if (hours < 3) return 'bg--gray-2';
    if (hours < 4) return 'bg--gray-1';
    return 'bg--black';
  }

  // Function to create contributions grid
  function createContributionsGrid() {
    var grid = document.getElementById('contributions-grid-half');
    if (!grid) return;
    
    var today = new Date();
    var startDate = new Date(today);
    startDate.setDate(today.getDate() - 364); // Show last 365 days
    
    // Create weeks container
    var weeksContainer = document.createElement('div');
    weeksContainer.className = 'flex flex--row gap--1 flex--center-x';
    
    // Generate 52 weeks
    for (var week = 0; week < 52; week++) {
      var weekCol = document.createElement('div');
      weekCol.className = 'flex flex--col gap--1';
      
      // Create 7 days for this week
      for (var day = 0; day < 7; day++) {
        var currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + (week * 7) + day);
        
        var dayOfWeek = currentDate.getDay(); // 0 = Sunday, 6 = Saturday
        
        // Skip weekends if exclude_weekends is enabled
        if (excludeWeekends && (dayOfWeek === 0 || dayOfWeek === 6)) {
          continue;
        }
        
        var daySquare = document.createElement('div');
        daySquare.className = 'w--3 h--3';
        
        var dateStr = currentDate.toISOString().split('T')[0];
        var hours = contributionsData[dateStr] || 0;
        daySquare.className += ' ' + getContributionLevel(hours);
        
        weekCol.appendChild(daySquare);
      }
      
      weeksContainer.appendChild(weekCol);
    }
    
    grid.appendChild(weeksContainer);
  }

  // Function to get X-axis configuration based on timeframe
  function getXAxisConfig(timeframe) {
    var config = {
      type: "datetime",
      labels: {
        style: {
          fontSize: "16px",
          color: "#000000"
        }
      },
      lineWidth: 0,
      gridLineDashStyle: "dot",
      tickWidth: 1,
      tickLength: 0,
      gridLineWidth: 1,
      gridLineColor: "#000000"
    };
    
    if (timeframe === 'last_7_days') {
      // Show day names for 7 days
      config.labels.format = '{value:%a}'; // Mon, Tue, Wed, etc.
      config.tickPixelInterval = 50;
    } else if (timeframe === 'last_30_days') {
      // Show dates for 30 days
      config.labels.format = '{value:%d.%m}'; // 15.07, 16.07, etc.
      config.tickPixelInterval = 80;
    } else if (timeframe === 'last_90_days') {
      // Show every 3rd date for 90 days
      config.labels.format = '{value:%d.%m}'; // 15.07, 18.07, 21.07, etc.
      config.tickPixelInterval = 120;
      config.tickInterval = 3 * 24 * 3600 * 1000; // Every 3 days in milliseconds
    } else if (timeframe === 'last_year') {
      // Show month names for year
      config.labels.format = '{value:%b}'; // Jan, Feb, Mar, etc.
      config.tickPixelInterval = 150;
      config.tickInterval = 30 * 24 * 3600 * 1000; // Monthly intervals
      config.dateTimeLabelFormats = {
        month: '%b',
        year: '%Y'
      };
    }
    
    return config;
  }

  // Function to create chart based on layout selection
  var createChart = function() {
    var xAxisConfig = getXAxisConfig(selectedTimeframe);
    
    if (selectedLayout === "contributions") {
      createContributionsGrid();
    } else if (selectedLayout === "bars") {
      // Create Bar Chart using Chartkick ColumnChart
      new Chartkick["ColumnChart"](
        "wakatime-chart-half",
        filteredChartData,
        {
          adapter: "highcharts",
          prefix: "",
          suffix: "h",
          thousands: ",",
          colors: ["black"],
          library: {
            chart: {
              height: 180
            },
            plotOptions: {
              series: {
                animation: false,
                pointPadding: 0.1,
                groupPadding: 0.1,
                borderWidth: 0
              }
            },
            yAxis: {
              labels: {
                style: {
                  fontSize: "16px",
                  color: "#000000"
                }
              },
              gridLineDashStyle: "shortdot",
              gridLineWidth: 1,
              gridLineColor: "#000000",
              tickAmount: 5,
              title: {
                text: "Hours Coded"
              }
            },
            xAxis: xAxisConfig
          }
        }
      );
    } else {
      // Create Line Chart (default) with data grouping
      var lineChartData = groupDataForLineChart(filteredChartData, selectedTimeframe);
      new Chartkick["LineChart"](
        "wakatime-chart-half",
        lineChartData,
        {
          adapter: "highcharts",
          prefix: "",
          suffix: "h",
          thousands: ",",
          points: false,
          colors: ["black"],
          curve: true,
          library: {
            chart: {
              height: 180
            },
            plotOptions: {
              series: {
                animation: false,
                lineWidth: 4
              }
            },
            yAxis: {
              labels: {
                style: {
                  fontSize: "16px",
                  color:"#000000"
                }
              },
              gridLineDashStyle: "shortdot",
              gridLineWidth: 1,
              gridLineColor: "#000000",
              tickAmount: 5,
              title: {
                text: "Hours Coded"
              }
            },
            xAxis: xAxisConfig
          }
        }
      );
    }
  };

  // ensure your chart loads before plugin render is generated
  if (selectedLayout === "contributions") {
    createChart();
  } else if ("Chartkick" in window) {
    createChart();
  } else {
    window.addEventListener("chartkick:load", createChart, true);
  }
</script>