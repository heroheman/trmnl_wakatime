<style>
.year {
    --gap: 4px;
}
.week {
    display: flex;
    flex-direction: column;
    gap: 0.25rem !important; 
    --gap: 10px;
}

.day {
    width: 11px;
    height: 11px;
    border-radius: 0.125rem;
    flex-shrink: 0;
}
</style>    


<!-- Shared WakaTime JavaScript Functions -->
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartkick@5.0.1/dist/chartkick.min.js"></script>

{% template calculate_hours %}
    {% assign total_decimal = 0 %}
    {% assign decimal_strings = "" %}
    {% assign data = data | reverse %}
    
    {% comment %} Iterate through the data for the specified limit {% endcomment %}
    {% for day in data limit: limit %}
        {% assign day_decimal = day.grand_total.decimal | plus: 0 %}
        {% comment %} Add to total decimal time {% endcomment %}
        {% assign decimal_strings = decimal_strings | append: day_decimal | append: ',' %}
        {% assign total_decimal = total_decimal | plus: day_decimal %}
    {% endfor %}
    {% comment %} Format time with 15-minute rounding {% endcomment %}
    {% assign total_minutes = total_decimal | times: 60 | round %}
    {% assign remainder = total_minutes | modulo: 15 %}
    {% if remainder > 0 %}
        {% assign total_minutes = total_minutes | plus: 15 | minus: remainder %}
    {% endif %}
    {% assign display_hours = total_minutes | divided_by: 60 %}
    {% assign display_minutes = total_minutes | modulo: 60 %}
    {% if display_minutes < 10 %}
        {% assign formatted_time = display_hours | append: 'h0' | append: display_minutes | append: 'm' %}
    {% else %}
        {% assign formatted_time = display_hours | append: 'h' | append: display_minutes| append: 'm' %}
    {% endif %}
    {% comment %} <span class="value value--tnums {{valueSize}}" data-value-fit="{{ valueFit }}">{{ decimal_strings }}</span> {% endcomment %}
    <span class="value value--tnums {{valueSize}}" data-value-fit="{{ valueFit }}">{{ formatted_time }}</span>
{% endtemplate %}

{% template contributions_grid %}
  <div class="contributions-container">
    <!-- Generate contributions grid in Liquid -->
    <div class="flex flex--row flex--center-x year">
      
      {% comment %} Simple approach: just render squares for the data we have {% endcomment %}
      {% assign days_rendered = 0 %}
      {% assign current_week_days = 0 %}
      
      {% for day in data limit: 364 reversed %}
        {% if day.range.start and day.grand_total.total_seconds %}
          {% assign hours = day.grand_total.total_seconds | divided_by: 3600.0 | round: 2 %}
          
          {% comment %} Start a new week column when needed {% endcomment %}
          {% if current_week_days == 0 %}
            <div class="flex flex--col week gap--0">
          {% endif %}
          
          {% comment %} Determine background class based on hours {% endcomment %}
          {% assign bg_class = 'bg--white' %}
          {% if hours > 0 %}
            {% if hours < 1 %}
              {% assign bg_class = 'bg--gray-6' %}
            {% elsif hours < 2 %}
              {% assign bg_class = 'bg--gray-4' %}
            {% elsif hours < 3 %}
              {% assign bg_class = 'bg--gray-3' %}
            {% elsif hours < 4 %}
              {% assign bg_class = 'bg--gray-2' %}
            {% elsif hours < 5 %}
              {% assign bg_class = 'bg--gray-1' %}
            {% else %}
              {% assign bg_class = 'bg--black' %}
            {% endif %}
          {% endif %}
          
          <div class="day {{ bg_class }}"></div>
          
          {% assign current_week_days = current_week_days | plus: 1 %}
          {% assign days_rendered = days_rendered | plus: 1 %}
          
          {% comment %} Close week column after 7 days {% endcomment %}
          {% if current_week_days == 7 %}
            </div>
            {% assign current_week_days = 0 %}
          {% endif %}
        {% endif %}
      {% endfor %}
      
      {% comment %} Close any remaining open week div {% endcomment %}
      {% if current_week_days > 0 %}
        </div>
      {% endif %}
      
    </div>
    
    <div class="flex flex--row flex--start-x mt--3">
      <span class="description">Less</span>
      <div class="flex flex--row gap--1 mx--3">
        <div class="w--3 h--3 bg--gray-7"></div>
        <div class="w--3 h--3 bg--gray-5"></div>
        <div class="w--3 h--3 bg--gray-3"></div>
        <div class="w--3 h--3 bg--gray-2"></div>
        <div class="w--3 h--3 bg--gray-1"></div>
        <div class="w--3 h--3 bg--black"></div>
      </div>
      <span class="description">More</span>
    </div>
  </div>
{% endtemplate %}


{% template dashboard_horizontal %}
    <!-- Key Metrics Grid -->
    {% assign metrics_array = selected_metrics | split: ',' %}
    {% assign metrics_count = metrics_array.size %}
    {% assign valueSize = '' %}

    {% if metrics_count > 0 %}
      {% if metrics_count == 1 %}
        {% assign grid_class = "grid grid--cols-1" %}
      {% elsif metrics_count == 2 %}
        {% assign grid_class = "grid grid--cols-2" %}
      {% elsif metrics_count == 3 %}
        {% assign grid_class = "grid grid--cols-3" %}
      {% elsif metrics_count == 4 %}
        {% assign grid_class = "grid grid--cols-4" %}
      {% else %}
        {% assign valueFit = true %}
        {% assign valueSize = 'value--small' %}

        {% assign grid_class = "grid grid--cols-5" %}
      {% endif %}
      
      <div class="{{ grid_class }}">
        {% for metric in metrics_array %}
          {% assign metric_trimmed = metric | strip %}
          <div class="item">
            <div class="meta"></div>
            <div class="content">
              {% if metric_trimmed == 'today' %}
                {% render 'calculate_hours' data: data, limit: 1, valueFit: valueFit, valueSize: valueSize %}
                <span class="label">Today</span>
              {% elsif metric_trimmed == 'this_week' %}
                {% render 'calculate_hours' data: data, limit: 7, valueFit: valueFit, valueSize: valueSize %}
                <span class="label">This Week</span>
              {% elsif metric_trimmed == 'this_month' %}
                {% render 'calculate_hours' data: data, limit: 30, valueFit: valueFit, valueSize: valueSize %}
                <span class="label">This Month</span>
              {% elsif metric_trimmed == 'last_3_months' %}
                {% render 'calculate_hours' data: data, limit: 90, valueFit: valueFit, valueSize: valueSize %}
                <span class="label">Last 3 Months</span>
              {% elsif metric_trimmed == 'last_year' %}
                {% render 'calculate_hours' data: data, limit: 365, valueFit: valueFit, valueSize: valueSize %}
                <span class="label">Last Year</span>
              {% endif %}
            </div>
          </div>
        {% endfor %}
      </div>
    {% endif %}
{% endtemplate %}

<script type="text/javascript">
  // Shared data preparation
  var prepareWakatimeData = function() {
    var chartData = [];
    var contributionsData = {};
    
    {% for day in data limit: 365 reversed %}
      {% if day.range.date and day.grand_total.total_seconds %}
        var hours = {{ day.grand_total.total_seconds | divided_by: 3600.0 | round: 2 }};
        chartData.push(["{{ day.range.date }}", hours]);
        contributionsData["{{ day.range.date }}"] = hours;
      {% endif %}
    {% endfor %}
    
    return {
      chartData: chartData,
      contributionsData: contributionsData
    };
  };

  // Get contribution level based on hours
  function getContributionLevel(hours) {
    if (hours === 0) return 'bg--white';
    if (hours < 1) return 'bg--gray-5';
    if (hours < 2) return 'bg--gray-4';
    if (hours < 3) return 'bg--gray-3';
    if (hours < 4) return 'bg--gray-2';
    if (hours < 6) return 'bg--gray-1';
    return 'bg--black';
  }

  // Create contributions grid
  var createContributionsGrid = function(gridId, contributionsData) {
    var grid = document.getElementById(gridId);
    if (!grid) return;
    
    var today = new Date();
    var startDate = new Date(today);
    startDate.setDate(today.getDate() - 364); // Show last 365 days
    
    // Create weeks container
    var weeksContainer = document.createElement('div');
    weeksContainer.className = 'flex flex--row gap--1 flex--center-x';
    
    // Generate 52 weeks
    for (var week = 0; week < 52; week++) {
      var weekCol = document.createElement('div');
      weekCol.className = 'flex flex--col gap--1';
      
      // Create 7 days for this week
      for (var day = 0; day < 10; day++) {
        var currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + (week * 7) + day);
        
        var daySquare = document.createElement('div');
        daySquare.className = 'w--2 h--2';
        
        var dateStr = currentDate.toISOString().split('T')[0];
        var hours = contributionsData[dateStr] || 0;
        daySquare.className += ' ' + getContributionLevel(hours);
        
        weekCol.appendChild(daySquare);
      }
      
      weeksContainer.appendChild(weekCol);
    }
    
    grid.appendChild(weeksContainer);
  };

  // Shared chart configuration
  var getChartConfig = function(chartData, chartType, chartHeight) {
    var height = chartHeight || 260;
    
    var baseConfig = {
      adapter: "highcharts",
      prefix: "",
      suffix: "h", 
      thousands: ",",
      colors: ["black"],
      library: {
        chart: {
          height: height
        },
        plotOptions: {
          series: {
            animation: false
          }
        },
        yAxis: {
          labels: {
            style: {
              fontSize: "16px",
              color: "#000000"
            }
          },
          gridLineDashStyle: "shortdot",
          gridLineWidth: 1,
          gridLineColor: "#000000",
          tickAmount: 5,
          title: {
            text: "Hours Coded"
          }
        },
        xAxis: {
          type: "datetime",
          labels: {
            style: {
              fontSize: "16px",
              color: "#000000"
            }
          },
          lineWidth: 0,
          gridLineDashStyle: "dot",
          tickWidth: 1,
          tickLength: 0,
          gridLineWidth: 1,
          gridLineColor: "#000000",
          tickPixelInterval: 120
        }
      }
    };

    if (chartType === "bars") {
      baseConfig.library.plotOptions.series.pointPadding = 0.1;
      baseConfig.library.plotOptions.series.groupPadding = 0.1;
      baseConfig.library.plotOptions.series.borderWidth = 0;
    } else {
      baseConfig.points = false;
      baseConfig.curve = true;
      baseConfig.library.plotOptions.series.lineWidth = 4;
    }

    return baseConfig;
  };

  // Create chart based on layout selection
  var createWakatimeChart = function(chartId, gridId, data, selectedLayout, chartHeight) {
    if (selectedLayout === "contributions / github style" || selectedLayout === "contributions") {
      createContributionsGrid(gridId, data.contributionsData);
    } else if (selectedLayout === "bars") {
      var config = getChartConfig(data.chartData, "bars", chartHeight);
      new Chartkick["ColumnChart"](chartId, data.chartData, config);
    } else {
      var config = getChartConfig(data.chartData, "lines", chartHeight);
      new Chartkick["LineChart"](chartId, data.chartData, config);
    }
  };

  // Initialize chart when ready
  var initializeWakatimeChart = function(chartId, gridId, selectedLayout, chartHeight) {
    var data = prepareWakatimeData();
    
    var createChart = function() {
      createWakatimeChart(chartId, gridId, data, selectedLayout, chartHeight);
    };

    if (selectedLayout === "contributions / github style" || selectedLayout === "contributions") {
      createChart();
    } else if ("Chartkick" in window) {
      createChart();
    } else {
      window.addEventListener("chartkick:load", createChart, true);
    }
  };
</script>


{% template wakatime_title_bar %}
  <div class="title_bar">
    <img class="image" src="https://wakatime.com/static/img/wakatime-logo.svg" />
    <span class="title">WakaTime</span>
    <span class="instance">Coding Activity</span>
  </div>
{% endtemplate %}
