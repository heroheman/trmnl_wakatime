<style>
.year {
    --gap: 4px;
}
.week {
    display: flex;
    flex-direction: column;
    gap: 0.25rem !important; 
    --gap: 10px;
}

.day {
    width: 11px;
    height: 11px;
    border-radius: 0.125rem;
    flex-shrink: 0;
}
</style>    


<!-- Shared WakaTime JavaScript Functions -->
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartkick@5.0.1/dist/chartkick.min.js"></script>

{% template calculate_hours %}
    {% assign total_decimal = 0 %}
    {% assign decimal_strings = "" %}
    {% assign data = data | reverse %}
    {% assign skip_count = skip | default: 0 %}
    {% assign processed_count = 0 %}
    {% assign skipped_count = 0 %}
    
    {% comment %} For calendar-based calculations (this_week, this_month) {% endcomment %}
    {% if calendar_type %}
        {% if calendar_type == 'week' %}
            {% comment %} Calculate days since Monday for current week {% endcomment %}
            {% assign today_date = 'now' | date: '%u' %} {% comment %} Monday=1, Sunday=7 {% endcomment %}
            {% assign days_since_monday = today_date | minus: 1 %}
            {% assign calendar_limit = days_since_monday | plus: 1 %}
        {% elsif calendar_type == 'month' %}
            {% comment %} Calculate days since first of month {% endcomment %}
            {% assign today_date = 'now' | date: '%d' %}
            {% assign calendar_limit = today_date | plus: 0 %}
        {% elsif calendar_type == 'last_week' %}
            {% comment %} Last Monday to Sunday (skip current week, take 7 days) {% endcomment %}
            {% assign today_date = 'now' | date: '%u' %}
            {% assign days_since_monday = today_date | minus: 1 %}
            {% assign skip_count = days_since_monday | plus: 1 %}
            {% assign calendar_limit = 7 %}
        {% elsif calendar_type == 'last_month' %}
            {% comment %} Approximate last month as 30 days, skip current month days {% endcomment %}
            {% assign today_date = 'now' | date: '%d' %}
            {% assign skip_count = today_date | plus: 0 %}
            {% assign calendar_limit = 30 %}
        {% endif %}
        {% assign limit = calendar_limit %}
    {% endif %}
    
    {% comment %} Iterate through the data, skipping and then limiting {% endcomment %}
    {% for day in data %}
        {% if skipped_count < skip_count %}
            {% assign skipped_count = skipped_count | plus: 1 %}
        {% elsif processed_count < limit %}
            {% assign day_decimal = day.grand_total.decimal | plus: 0 %}
            {% comment %} Add to total decimal time {% endcomment %}
            {% assign decimal_strings = decimal_strings | append: day_decimal | append: ',' %}
            {% assign total_decimal = total_decimal | plus: day_decimal %}
            {% assign processed_count = processed_count | plus: 1 %}
        {% else %}
            {% break %}
        {% endif %}
    {% endfor %}
    {% comment %} Format time with 15-minute rounding {% endcomment %}
    {% assign total_minutes = total_decimal | times: 60 | round %}
    {% assign remainder = total_minutes | modulo: 15 %}
    {% if remainder > 0 %}
        {% assign total_minutes = total_minutes | plus: 15 | minus: remainder %}
    {% endif %}
    {% assign display_hours = total_minutes | divided_by: 60 %}
    {% assign display_minutes = total_minutes | modulo: 60 %}
    {% if display_minutes == 0 %}
        {% assign formatted_time = display_hours | append: 'h' %}
    {% elsif display_minutes < 10 %}
        {% assign formatted_time = display_hours | append: 'h0' | append: display_minutes | append: 'm' %}
    {% else %}
        {% assign formatted_time = display_hours | append: 'h' | append: display_minutes| append: 'm' %}
    {% endif %}
    {% comment %} <span class="value value--tnums {{valueSize}}" data-value-fit="{{ valueFit }}">{{ decimal_strings }}</span> {% endcomment %}
    <span class="value value--tnums {{valueSize}}" data-value-fit="{{ valueFit }}">{{ formatted_time }}</span>
{% endtemplate %}

{% template contributions_grid %}
  <div class="contributions-container">
    <!-- Generate contributions grid in Liquid -->
    <div class="flex flex--row flex--center-x year">
      
      {% comment %} Simple approach: just render squares for the data we have {% endcomment %}
      {% assign days_rendered = 0 %}
      {% assign current_week_days = 0 %}
      
      {% for day in data limit: 364 reversed %}
        {% if day.range.date and day.grand_total.total_seconds %}
          {% assign hours = day.grand_total.total_seconds | divided_by: 3600.0 | round: 2 %}
         
          {% comment %} Start a new week column when needed {% endcomment %}
          {% if current_week_days == 0 %}
            <div class="flex flex--col week gap--0">
          {% endif %}
          
          {% comment %} Determine background class based on hours {% endcomment %}
          {% assign bg_class = 'bg--gray-7' %}
          {% if hours > 0 %}
            {% if hours < 1 %}
              {% assign bg_class = 'bg--gray-6' %}
            {% elsif hours < 2 %}
              {% assign bg_class = 'bg--gray-4' %}
            {% elsif hours < 3 %}
              {% assign bg_class = 'bg--gray-3' %}
            {% elsif hours < 4 %}
              {% assign bg_class = 'bg--gray-2' %}
            {% elsif hours < 5 %}
              {% assign bg_class = 'bg--gray-1' %}
            {% else %}
              {% assign bg_class = 'bg--black' %}
            {% endif %}
          {% endif %}
          
          <div class="day {{ bg_class }}"></div>
          
          {% assign current_week_days = current_week_days | plus: 1 %}
          {% assign days_rendered = days_rendered | plus: 1 %}
          
          {% comment %} Close week column after 7 days {% endcomment %}
          {% if current_week_days == 7 %}
            </div>
            {% assign current_week_days = 0 %}
          {% endif %}
        {% endif %}
      {% endfor %}
      
      {% comment %} Close any remaining open week div {% endcomment %}
      {% if current_week_days > 0 %}
        </div>
      {% endif %}
      
    </div>
    
    <div class="flex flex--row flex--start-x mt--3">
      <span class="description">Less</span>
      <div class="flex flex--row gap--1 mx--3">
        <div class="w--3 h--3 bg--gray-7"></div>
        <div class="w--3 h--3 bg--gray-5"></div>
        <div class="w--3 h--3 bg--gray-3"></div>
        <div class="w--3 h--3 bg--gray-2"></div>
        <div class="w--3 h--3 bg--gray-1"></div>
        <div class="w--3 h--3 bg--black"></div>
      </div>
      <span class="description">More</span>
    </div>
  </div>
{% endtemplate %}

{% comment %} === SHARED TEMPLATES === {% endcomment %}

{% template render_metric_item %}
    {% assign metric_trimmed = metric_trimmed | replace: '[', '' | replace: ']', '' | replace: '"', '' %}
  <div class="item">
    <div class="meta"></div>
    <div class="content">
      {% if metric_trimmed == 'today' %}
        {% comment %} DEBUG: First entry should be today {% endcomment %}
        {% render 'calculate_hours' data: data, limit: 1, valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Today</span>
      {% elsif metric_trimmed == 'yesterday' %}
        {% comment %} DEBUG: Skip first (today), take second (yesterday) {% endcomment %}
        {% render 'calculate_hours' data: data, limit: 1, skip: 1, valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Yesterday</span>
      {% elsif metric_trimmed == 'this_week' %}
        {% render 'calculate_hours' data: data, calendar_type: 'week', valueFit: valueFit, valueSize: valueSize %}
        <span class="label">This Week</span>
      {% elsif metric_trimmed == 'last_week' %}
        {% render 'calculate_hours' data: data, calendar_type: 'last_week', valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Last Week</span>
      {% elsif metric_trimmed == 'last_7_days' %}
        {% render 'calculate_hours' data: data, limit: 7, valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Last 7 Days</span>
      {% elsif metric_trimmed == 'this_month' %}
        {% render 'calculate_hours' data: data, calendar_type: 'month', valueFit: valueFit, valueSize: valueSize %}
        <span class="label">This Month</span>
      {% elsif metric_trimmed == 'last_month' %}
        {% render 'calculate_hours' data: data, calendar_type: 'last_month', valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Last Month</span>
      {% elsif metric_trimmed == 'last_30_days' %}
        {% render 'calculate_hours' data: data, limit: 30, valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Last 30 Days</span>
      {% elsif metric_trimmed == 'last_3_months' %}
        {% render 'calculate_hours' data: data, limit: 90, valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Last 3 Months</span>
      {% elsif metric_trimmed == 'last_year' %}
        {% render 'calculate_hours' data: data, limit: 365, valueFit: valueFit, valueSize: valueSize %}
        <span class="label">Last Year</span>
      {% endif %}
    </div>
  </div>
{% endtemplate %}

{% comment %} === DASHBOARD TEMPLATES === {% endcomment %}

{% template dashboard_horizontal %}
    <!-- Key Metrics Grid -->
    {% comment %} Handle both array and string formats for selected_metrics {% endcomment %}
    {% comment %} Try to access array elements directly - if it fails, it's a string {% endcomment %}
    {% assign first_metric = selected_metrics[0] %}
    {% if first_metric %}
      {% assign metrics_array = selected_metrics %}
    {% else %}
      {% assign metrics_array = selected_metrics | split: ',' %}
    {% endif %}
    {% assign metrics_count = metrics_array.size %}
    {% assign valueSize = '' %}

    {% comment %} Apply metric_limit if set {% endcomment %}
    {% if metric_limit and metric_limit > 0 and metric_limit < metrics_count %}
      {% assign metrics_count = metric_limit %}
    {% endif %}

    {% if metrics_count > 0 %}
      {% if metrics_count == 1 %}
        {% assign grid_class = "grid grid--cols-1" %}
      {% elsif metrics_count == 2 %}
        {% assign grid_class = "grid grid--cols-2" %}
      {% elsif metrics_count == 3 %}
        {% assign grid_class = "grid grid--cols-3" %}
      {% elsif metrics_count == 4 or metrics_count == 8 %}
        {% assign valueSize = 'value--xsmall' %}
        {% assign grid_class = "grid grid--cols-4" %}
      {% elsif metrics_count == 5 %}
        {% assign valueSize = 'value--xsmall' %}
        {% assign grid_class = "grid grid--cols-5" %}
      {% elsif metrics_count == 6 %}
        {% assign valueSize = 'value--xsmall' %}
        {% assign valueSize = 'value--xsmall' %}
        {% assign grid_class = "grid grid--cols-6" %}
      {% else %}
        {% assign valueFit = true %}
        {% assign valueSize = 'value--small' %}

        {% assign grid_class = "grid grid--cols-5" %}
      {% endif %}
      
      <div class="{{ grid_class }}">
        {% for metric in metrics_array limit: metrics_count %}
          {% assign metric_trimmed = metric | strip %}
          {% if metric_trimmed != '' %}
            {% render 'render_metric_item' metric_trimmed: metric_trimmed, data: data, valueFit: valueFit, valueSize: valueSize %}
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}
{% endtemplate %}

{% template dashboard_vertical %}
    <!-- Key Metrics Grid for Vertical Layout -->
    {% comment %} Handle both array and string formats for selected_metrics {% endcomment %}
    {% comment %} Try to access array elements directly - if it fails, it's a string {% endcomment %}
    {% assign first_metric = selected_metrics[0] %}
    {% if first_metric %}
      {% assign metrics_array = selected_metrics %}
    {% else %}
      {% assign metrics_array = selected_metrics | split: ',' %}
    {% endif %}
    {% assign metrics_count = metrics_array.size %}
    {% comment %} falls valueSize nicht gesetzt, lass leer {% endcomment %}
    {% assign valueSize = valueSize | default: '' %}
    {% assign valueFit = valueFit | default: false %}
    
    {% comment %} Apply metric_limit if set {% endcomment %}
    {% if metric_limit and metric_limit > 0 and metric_limit < metrics_count %}
      {% assign metrics_count = metric_limit %}
    {% endif %}

    {% if metrics_count > 0 %}
      {% comment %} {% if metrics_count > 8 %}
        {% assign valueSize = 'value--xsmall' %}
      {% else %}
        {% assign valueFit = true %}
        {% assign valueSize = 'value--small' %}

        {% assign grid_class = "grid grid--cols-5" %}
      {% endif %} {% endcomment %}

      {% comment %} For vertical layout, always use 2 columns max, distribute rows {% endcomment %}
      {% assign rows_needed = metrics_count | divided_by: 2.0 | ceil %}
      
      {% for row in (1..rows_needed) %}
        {% assign start_index = row | minus: 1 | times: 2 %}
        {% assign end_index = start_index | plus: 1 %}
        
        {% comment %} Count actual items in this row (respect metric_limit) {% endcomment %}
        {% assign items_in_row = 0 %}
        {% for i in (start_index..end_index) %}
          {% if i < metrics_count and metrics_array[i] and metrics_array[i] != '' %}
            {% assign items_in_row = items_in_row | plus: 1 %}
          {% endif %}
        {% endfor %}
        
        {% if items_in_row == 1 %}
          {% assign grid_class = "grid grid--cols-1" %}
        {% elsif items_in_row == 2 %}
          {% assign grid_class = "grid grid--cols-2" %}
        {% endif %}
        
        {% if items_in_row > 0 %}
          <div class="{{ grid_class }}">
            {% for i in (start_index..end_index) %}
              {% if i < metrics_count %}
                {% assign metric = metrics_array[i] | strip %}
                {% if metric != '' %}
                  {% render 'render_metric_item' metric_trimmed: metric, data: data, valueFit: valueFit, valueSize: valueSize %}
                {% endif %}
              {% endif %}
            {% endfor %}
          </div>
        {% endif %}
      {% endfor %}
    {% endif %}
{% endtemplate %}


{% template wakatime_charts %}
    <div id="wakatime-chart-full" style="width: 100%"></div>
    <script type="text/javascript">
    // Prepare chart data from Wakatime API response
    var chartData = [];
    var contributionsData = {};
    var chartHeight = {{ chart_height | default: 260 }};
    var showXAxisLabels = "{{ show_x_axis_labels | default: 'true' }}" === 'true';
    var dateFormat = "{{ date_format | default: '%d.%m' }}";
    
    // Get selected timeframe from settings
    var selectedTimeframe = "{{ selected_timeframe |  default: 'last_30_days' }}";
    var dataLimit = 365; // Default for contributions and last_year
    
    if (selectedTimeframe === 'last_7_days') {
        dataLimit = 7;
    } else if (selectedTimeframe === 'last_30_days') {
        dataLimit = 30;
    } else if (selectedTimeframe === 'last_90_days') {
        dataLimit = 90;
    }
    
    {% for day in data limit: 365 reversed %}
        {% if day.range.date and day.grand_total.total_seconds %}
        {% assign day_start_date = day.range.date %}
        {% comment %} Convert date string to JavaScript Date object {% endcomment %}
        var hours = {{ day.grand_total.total_seconds | divided_by: 3600.0 | round: 2 }};
        chartData.push([new Date("{{ day_start_date }}").getTime(), hours]);
        contributionsData["{{ day_start_date }}"] = hours;
        {% endif %}
    {% endfor %}

    // Get selected layout from settings
    var selectedLayout = "{{ selected_layout | default: 'lines' }}";
    
    // Get grouping setting
    var enableGrouping = "{{ enable_grouping | default: 'true' }}" === 'true';
    
    // Filter chart data based on timeframe (but not contributions)
    var filteredChartData = chartData;
    if (selectedLayout !== "contributions") {
        filteredChartData = chartData.slice(-dataLimit);
    }

    // Function to group data for line charts
    function groupDataForLineChart(data, timeframe) {
        // Only group if grouping is enabled
        if (!enableGrouping) {
        return data;
        }
        
        if (timeframe === 'last_90_days') {
        // Group by 7-day periods and calculate median
        var groupedData = [];
        for (var i = 0; i < data.length; i += 7) {
            var weekData = data.slice(i, i + 7);
            if (weekData.length > 0) {
            var values = weekData.map(function(item) { return item[1]; }).sort(function(a, b) { return a - b; });
            var median = values.length % 2 === 0 
                ? (values[Math.floor(values.length / 2) - 1] + values[Math.floor(values.length / 2)]) / 2
                : values[Math.floor(values.length / 2)];
            // Use the last date of the week
            groupedData.push([weekData[weekData.length - 1][0], median]);
            }
        }
        return groupedData;
        } else if (timeframe === 'last_year') {
        // Group by month and calculate median
        var monthlyGroups = {};
        data.forEach(function(item) {
            var date = new Date(item[0]);
            var monthKey = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0');
            if (!monthlyGroups[monthKey]) {
            monthlyGroups[monthKey] = [];
            }
            monthlyGroups[monthKey].push(item[1]);
        });
        
        var groupedData = [];
        Object.keys(monthlyGroups).sort().forEach(function(monthKey) {
            var values = monthlyGroups[monthKey].sort(function(a, b) { return a - b; });
            var median = values.length % 2 === 0 
            ? (values[Math.floor(values.length / 2) - 1] + values[Math.floor(values.length / 2)]) / 2
            : values[Math.floor(values.length / 2)];
            // Use first day of month as timestamp
            groupedData.push([new Date(monthKey + '-01').getTime(), median]);
        });
        return groupedData;
        }
        return data;
    }

    // Function to get X-axis configuration based on timeframe
    function getXAxisConfig(timeframe, showXAxisLabels, dateFormat) {
        console.log("getXAxisConfig called with timeframe:", timeframe, "showXAxisLabels:", showXAxisLabels, "dateFormat:", dateFormat);
        var config = {
            type: "datetime",
            labels: {
                style: {
                    fontSize: "14px",
                    color: "#000000"
                },
                y: 25 // Move labels slightly down
            },
            gridLineDashStyle: "solid",
            tickWidth: 1,
            tickLength: 8,
            tickColor: "#666666",
            gridLineWidth: 1,
            gridLineColor: "#cccccc",
            lineWidth: 1,
            lineColor: "#000000"
        };

        if (showXAxisLabels) {
            config.labels.enabled = true;
            config.gridLineWidth = 1;
            
            if (timeframe === 'last_7_days') {
                // Use custom format or default to weekday for 7 days
                var format = dateFormat === '%a' || dateFormat === '%A' ? dateFormat : '%a';
                config.labels.format = '{value:' + format + '}';
                config.tickPixelInterval = 50;
                config.gridLineDashStyle = "solid";
            } else if (timeframe === 'last_30_days') {
                // Use selected date format
                config.labels.format = '{value:' + dateFormat + '}';
                config.tickPixelInterval = 80;
                config.gridLineDashStyle = "dot";
            } else if (timeframe === 'last_90_days') {
                // Use selected date format
                config.labels.format = '{value:' + dateFormat + '}';
                config.tickPixelInterval = 120;
                config.gridLineDashStyle = "dot";
            } else if (timeframe === 'last_year') {
                // Use custom format or default to month for year
                var format = dateFormat.includes('%b') || dateFormat.includes('%B') || dateFormat.includes('%m') ? dateFormat : '%b';
                config.labels.format = '{value:' + format + '}';
                config.tickPixelInterval = 120;
                config.gridLineDashStyle = "solid";
            }
        } else {
            config.labels.enabled = false;
            config.gridLineWidth = 0;
            config.tickLength = 0;
        }
        
        return config;
    }

    // Function to create chart based on layout selection
    var createChart = function(showXAxisLabels) {
        var xAxisConfig = getXAxisConfig(selectedTimeframe, showXAxisLabels, dateFormat);
        
        if (selectedLayout === "contributions") {
        // Contributions are now rendered in Liquid template
        return;
        } else if (selectedLayout === "bars") {
        // Create Bar Chart using Chartkick ColumnChart
        new Chartkick["ColumnChart"](
            "wakatime-chart-full",
            filteredChartData,
            {
            adapter: "highcharts",
            prefix: "",
            suffix: "h",
            thousands: ",",
            colors: ["black"],
            tooltip: false,
            library: {
                chart: {
                height: chartHeight
                },
                plotOptions: {
                series: {
                    animation: false,
                    pointPadding: 0.1,
                    groupPadding: 0.1,
                    borderWidth: 0
                }
                },
                yAxis: {
                labels: {
                    style: {
                    fontSize: "16px",
                    color: "#000000"
                    }
                },
                gridLineDashStyle: "shortdot",
                gridLineWidth: 1,
                gridLineColor: "#000000",
                tickAmount: 5,
                title: {
                    text: "Hours Coded"
                }
                },
                xAxis: xAxisConfig
            }
            }
        );
        } else {
        // Create Line Chart (default) with data grouping
        var lineChartData = groupDataForLineChart(filteredChartData, selectedTimeframe);
        new Chartkick["LineChart"](
            "wakatime-chart-full",
            lineChartData,
            {
            adapter: "highcharts",
            prefix: "",
            suffix: "h",
            thousands: ",",
            points: false,
            colors: ["black"],
            curve: true,
            tooltip: false,
            library: {
                chart: {
                height: chartHeight
                },
                plotOptions: {
                series: {
                    animation: false,
                    lineWidth: 4
                }
                },
                yAxis: {
                labels: {
                    style: {
                    fontSize: "16px",
                    color:"#000000"
                    }
                },
                gridLineDashStyle: "shortdot",
                gridLineWidth: 1,
                gridLineColor: "#000000",
                tickAmount: 5,
                title: {
                    text: "Hours Coded"
                }
                },
                xAxis: xAxisConfig
            }
            }
        );
        }
    };

    // ensure your chart loads before plugin render is generated
    if (selectedLayout === "contributions") {
        // Contributions are now rendered in Liquid template - no JavaScript needed
    } else if ("Chartkick" in window) {
        createChart(showXAxisLabels);
    } else {
        window.addEventListener("chartkick:load", createChart, true);
    }
    </script>
{% endtemplate %}

{% template wakatime_title_bar %}
  <div class="title_bar">
    <img class="image" src="https://wakatime.com/static/img/wakatime.svg" />
    <span class="title">WakaTime</span>
    <span class="instance">Coding Activity</span>
  </div>
{% endtemplate %}
